Microsoft (R) Macro Assembler Version 6.11		    08/03/23 13:59:13
src\P01.asm						     Page 1 - 1


				;	Author:     221003350 Ariel Sischy
				;	Computer Science 3B - P01

				.386
				.MODEL FLAT ; Flat memory model
				.STACK 4096 ; 4096 bytes

				INCLUDE io.inc ; Directive to use the IO Library
			      C ;
			      C ; Simple I/O Routines - Version 2
			      C ;
			      C 
			      C IFNDEF IO_INC
 = 1			      C IO_INC equ <1>
			      C 
			      C OutputStr PROTO NEAR32 STDCALL :DWORD
			      C OutputInt PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat PROTO NEAR32 STDCALL :DWORD
			      C OutputFloat8 PROTO NEAR32 STDCALL :QWORD
			      C InputInt PROTO NEAR32 STDCALL
			      C InputStr PROTO NEAR32 STDCALL :DWORD, :DWORD
			      C 
			      C ELSE
			      C ENDIF
			      C 

				; Exit function
				ExitProcess PROTO NEAR32 stdcall, dwExitCode:DWORD

				; The data section stores all global variables
 00000000			.DATA

 00000000 54 68 65 20 61	strAvg BYTE "The average is: ", 0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 00000011 2E 00			strDot BYTE ".", 0

 00000013 50 6C 65 61 73	strInputY0 BYTE "Please Input Y0: ", 0
	   65 20 49 6E 70
	   75 74 20 59 30
	   3A 20 00
 00000025 50 6C 65 61 73	strInputY1 BYTE "Please Input Y1: ", 0
	   65 20 49 6E 70
	   75 74 20 59 31
	   3A 20 00
 00000037 50 6C 65 61 73	strInputY2 BYTE "Please Input Y2: ", 0
	   65 20 49 6E 70
	   75 74 20 59 32
	   3A 20 00
 00000049 50 6C 65 61 73	strInputY3 BYTE "Please Input Y3: ", 0
	   65 20 49 6E 70
	   75 74 20 59 33
	   3A 20 00

 0000005B 50 6C 65 61 73	strInputK0 BYTE "Please Input K0: ", 0
	   65 20 49 6E 70
	   75 74 20 4B 30
	   3A 20 00
 0000006D 50 6C 65 61 73	strInputK1 BYTE "Please Input K1: ", 0
	   65 20 49 6E 70
	   75 74 20 4B 31
	   3A 20 00
 0000007F 50 6C 65 61 73	strInputK2 BYTE "Please Input K2: ", 0
	   65 20 49 6E 70
	   75 74 20 4B 32
	   3A 20 00
 00000091 50 6C 65 61 73	strInputK3 BYTE "Please Input K3: ", 0
	   65 20 49 6E 70
	   75 74 20 4B 33
	   3A 20 00

 000000A3 00000000		Y0 DWORD ?
 000000A7 00000000		Y1 DWORD ?
 000000AB 00000000		Y2 DWORD ?
 000000AF 00000000		Y3 DWORD ?

 000000B3 00000000		K0 DWORD ?
 000000B7 00000000		K1 DWORD ?
 000000BB 00000000		K2 DWORD ?
 000000BF 00000000		K3 DWORD ?


 000000C3 00000000		Average DWORD ?


 00000000			.CODE
 00000000			_start:
 00000000
					;Input and output to get Y values
					INVOKE OutputStr, ADDR strInputY0 ;output msg
					INVOKE InputInt ;get user input
 0000000F  A3 000000A3 R		MOV Y0, eax ; store Y0

					INVOKE OutputStr, ADDR strInputY1 ;output msg
					INVOKE InputInt ;get user input
 00000023  A3 000000A7 R		MOV Y1, eax ; store Y1

					INVOKE OutputStr, ADDR strInputY2 ;output msg
					INVOKE InputInt ;get user input
 00000037  A3 000000AB R		MOV Y2, eax ; store Y2

					INVOKE OutputStr, ADDR strInputY3 ;output msg
					INVOKE InputInt ;get user input
 0000004B  A3 000000AF R		MOV Y3, eax ; store Y3


					;Input and output to get K values
					INVOKE OutputStr, ADDR strInputK0 ;output msg
					INVOKE InputInt ;get user input
 0000005F  A3 000000B3 R		MOV K0, eax ; store K0

					INVOKE OutputStr, ADDR strInputK1 ;output msg
					INVOKE InputInt ;get user input
 00000073  A3 000000B7 R		MOV K1, eax ; store K1

					INVOKE OutputStr, ADDR strInputK2 ;output msg
					INVOKE InputInt ;get user input
 00000087  A3 000000BB R		MOV K2, eax ; store K2

					INVOKE OutputStr, ADDR strInputK3 ;output msg
					INVOKE InputInt ;get user input
 0000009B  A3 000000BF R		MOV K3, eax ; store K3


					; block to create Y0 * K0
 000000A0  A1 000000A3 R		MOV eax, Y0
 000000A5  0F AF 05			IMUL eax, K0
	   000000B3 R
 000000AC  A3 000000C3 R		Mov Average, eax

					; block to create Y1 * K1
 000000B1  A1 000000A7 R		MOV eax, Y1
 000000B6  0F AF 05			IMUL eax, K1
	   000000B7 R
 000000BD  01 05 000000C3 R		ADD Average, eax

					; block to create Y2 * K2
 000000C3  A1 000000AB R		MOV eax, Y2
 000000C8  0F AF 05			IMUL eax, K2
	   000000BB R
 000000CF  01 05 000000C3 R		ADD Average, eax

					; block to create Y3 * K3
 000000D5  A1 000000AF R		MOV eax, Y3
 000000DA  0F AF 05			IMUL eax, K3
	   000000BF R
 000000E1  01 05 000000C3 R		ADD Average, eax

					;block to divide average = everything/4

 000000E7  A1 000000C3 R		MOV eax, Average ;move average to eax
					
					
 000000EC  BB 00000004			MOV ebx, 4; ebx = 4
 000000F1  99				cdq ;get ready for division

 000000F2  F7 FB			idiv ebx ; divide eax by ebx



					;block to output final average
 000000F4  A3 000000C3 R		Mov Average, eax

					INVOKE OutputStr, ADDR strAvg
					INVOKE OutputInt, Average


					;outpud dot
					INVOKE OutputStr, ADDR strDot

					;block to turn remainder into decimal
 00000118  8B C2			MOV eax, edx
 0000011A  6B C0 64			IMUL eax, 100
 0000011D  BB 00000004			MOV ebx, 4
 00000122  99				cdq ;get ready for division
 00000123  F7 FB			iDIV ebx

					;output decimal
					INVOKE OutputInt, eax


					INVOKE ExitProcess, 0
 00000132			Public _start
				END
Microsoft (R) Macro Assembler Version 6.11		    08/03/23 13:59:13
src\P01.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000000C7 DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000132 DWord	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

$$$$$$00001  . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000132 Private
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
InputStr . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat8 . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputFloat  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputInt  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OutputStr  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
Average  . . . . . . . . . . . .	DWord	 000000C3 _DATA	
IO_INC . . . . . . . . . . . . .	Text   	 1
K0 . . . . . . . . . . . . . . .	DWord	 000000B3 _DATA	
K1 . . . . . . . . . . . . . . .	DWord	 000000B7 _DATA	
K2 . . . . . . . . . . . . . . .	DWord	 000000BB _DATA	
K3 . . . . . . . . . . . . . . .	DWord	 000000BF _DATA	
Y0 . . . . . . . . . . . . . . .	DWord	 000000A3 _DATA	
Y1 . . . . . . . . . . . . . . .	DWord	 000000A7 _DATA	
Y2 . . . . . . . . . . . . . . .	DWord	 000000AB _DATA	
Y3 . . . . . . . . . . . . . . .	DWord	 000000AF _DATA	
_start . . . . . . . . . . . . .	L Near	 00000000 _TEXT	Public
strAvg . . . . . . . . . . . . .	Byte	 00000000 _DATA	
strDot . . . . . . . . . . . . .	Byte	 00000011 _DATA	
strInputK0 . . . . . . . . . . .	Byte	 0000005B _DATA	
strInputK1 . . . . . . . . . . .	Byte	 0000006D _DATA	
strInputK2 . . . . . . . . . . .	Byte	 0000007F _DATA	
strInputK3 . . . . . . . . . . .	Byte	 00000091 _DATA	
strInputY0 . . . . . . . . . . .	Byte	 00000013 _DATA	
strInputY1 . . . . . . . . . . .	Byte	 00000025 _DATA	
strInputY2 . . . . . . . . . . .	Byte	 00000037 _DATA	
strInputY3 . . . . . . . . . . .	Byte	 00000049 _DATA	

	   0 Warnings
	   0 Errors
